package com.ProyectoMatematicas;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Objects;

import com.misael.Mathematics.BiseccionModel;
import com.misael.Mathematics.Mathematics;
import com.misael.Mathematics.ReglaFalsaModel;
import com.misael.Mathematics.SecanteModel;

public class Interfaz extends JFrame {
    private JPanel            panelPrincipal;
    private JPanel            panelEncabezado;
    private JPanel            panelInferior;
    private JPanel            panelTabla;
    private JPanel            panelInputs;
    private JTextField        tfFx;
    private JComboBox<String> cbMetodos;
    private JButton           btnResolver;
    private JLabel            labelLogo;
    private JLabel            labelfx;
    private JLabel            labelSolucionInfo;
    private JLabel            labelErrorInfo;
    private JPanel            panelBiseccion;
    private JPanel            panelReglaFalsa;
    private JPanel            panelSecante;
    private JScrollPane       scrollBiseccion;
    private JTable            tableBiseccion;
    private JScrollPane       scrollReglaFalsa;
    private JTable            tableReglaFalsa;
    private JScrollPane       scrollSecante;
    private JTable            tableSecante;
    private JLabel            labelBiseccion;
    private JLabel            labelReglaFalsa;
    private JLabel            labelSecante;
    private JLabel            sideNavLabel;
    private ImageIcon         iconoBiseccionOFF;
    private ImageIcon         iconoReglaFalsaOFF;
    private ImageIcon         iconoSecanteOFF;
    private ImageIcon         iconoBiseccionON;
    private ImageIcon         iconoReglaFalsaON;
    private ImageIcon         iconoSecanteON;
    private ImageIcon         iconoLogo;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */

    public Interfaz() {
        super("MatemÃ¡ticas");
        $$$setupUI$$$();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setResizable(false);
        this.setContentPane(panelPrincipal);
        crearIconos();
        configurarComponentes();
        initActionListeners();
        this.setSize(1280, 720);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    public void configurarComponentes() {
        labelBiseccion.setIcon(iconoBiseccionOFF);
        labelSecante.setIcon(iconoSecanteOFF);
        labelReglaFalsa.setIcon(iconoReglaFalsaOFF);
        labelLogo.setIcon(iconoLogo);

        tableBiseccion.setModel(new BiseccionModel());
        tableReglaFalsa.setModel(new ReglaFalsaModel());
        tableSecante.setModel(new SecanteModel());
    }

    private void crearIconos() {
        try {
            sideNavLabel.setIcon(new ImageIcon(ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/sidenav.png"))));

            BufferedImage imagenBiseccionOFF = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Biseccion_OFF.png"));
            iconoBiseccionOFF = new ImageIcon(imagenBiseccionOFF.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenSecanteOFF = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Secante_OFF.png"));
            iconoSecanteOFF = new ImageIcon(imagenSecanteOFF.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenReglaFalsaOFF = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/ReglaFalsa_OFF.png"));
            iconoReglaFalsaOFF = new ImageIcon(imagenReglaFalsaOFF.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenBiseccionON = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Biseccion_ON.png"));
            iconoBiseccionON = new ImageIcon(imagenBiseccionON.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenSecanteON = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Secante_ON.png"));
            iconoSecanteON = new ImageIcon(imagenSecanteON.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenReglaFalsaON = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/ReglaFalsa_ON.png"));
            iconoReglaFalsaON = new ImageIcon(imagenReglaFalsaON.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenLogo = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/logoMathematics.png"));
            iconoLogo = new ImageIcon(imagenLogo.getScaledInstance(237, 60, Image.SCALE_SMOOTH));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void initActionListeners() {

        btnResolver.addActionListener(e -> {
            String input = tfFx.getText();

            Mathematics biseccion = new Mathematics();
            double      resultBiseccion    = Mathematics.metodoBiseccion(input, 0.0001);
            tableBiseccion.setModel(new BiseccionModel(biseccion.getTablaBiseccion()));

            Mathematics reglaFalsa = new Mathematics();
            double      resultReglaFalsa     = Mathematics.metodoReglaFalsa(input, 0.0001);
            tableReglaFalsa.setModel(new ReglaFalsaModel(reglaFalsa.getTablaReglaFalsa()));


            Mathematics secante = new Mathematics();
            double      resultSecante  = Mathematics.metodoSecante(input, 0.0001);
            tableSecante.setModel(new SecanteModel(secante.getTablaSecante()));



        });

        labelBiseccion.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                labelBiseccion.setIcon(iconoBiseccionON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                labelBiseccion.setIcon(iconoBiseccionOFF);
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                labelSecante.setIcon(iconoSecanteOFF);
                labelBiseccion.setIcon(iconoBiseccionON);
                labelReglaFalsa.setIcon(iconoReglaFalsaOFF);
                cargarPanelBiseccion();
            }

        });

        labelReglaFalsa.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                labelReglaFalsa.setIcon(iconoReglaFalsaON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                labelReglaFalsa.setIcon(iconoReglaFalsaOFF);
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                labelSecante.setIcon(iconoSecanteOFF);
                labelBiseccion.setIcon(iconoBiseccionOFF);
                labelReglaFalsa.setIcon(iconoReglaFalsaON);
                cargarPanelReglaFalsa();
            }

        });

        labelSecante.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                labelSecante.setIcon(iconoSecanteON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                labelSecante.setIcon(iconoSecanteOFF);
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                labelSecante.setIcon(iconoSecanteON);
                labelBiseccion.setIcon(iconoBiseccionOFF);
                labelReglaFalsa.setIcon(iconoReglaFalsaOFF);
                cargarPanelSecante();
            }

        });

    }

    private void cargarPanelSecante() {
        panelTabla.removeAll();
        panelTabla.add(panelSecante);
        panelTabla.repaint();
        panelTabla.revalidate();
    }

    private void cargarPanelReglaFalsa() {
        panelTabla.removeAll();
        panelTabla.add(panelReglaFalsa);
        panelTabla.repaint();
        panelTabla.revalidate();
    }

    private void cargarPanelBiseccion() {
        panelTabla.removeAll();
        panelTabla.add(panelBiseccion);
        panelTabla.repaint();
        panelTabla.revalidate();
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelPrincipal = new JPanel();
        panelPrincipal.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelEncabezado = new JPanel();
        panelEncabezado.setLayout(new GridLayoutManager(1, 9, new Insets(0, 0, 0, 0), -1, -1));
        panelEncabezado.setBackground(new Color(-5131346));
        panelPrincipal.add(panelEncabezado, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelEncabezado.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(5, 15, 5, 15), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final Spacer spacer1 = new Spacer();
        panelEncabezado.add(spacer1, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        labelLogo = new JLabel();
        labelLogo.setText("");
        panelEncabezado.add(labelLogo, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelBiseccion = new JLabel();
        labelBiseccion.setText("");
        panelEncabezado.add(labelBiseccion, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelReglaFalsa = new JLabel();
        labelReglaFalsa.setText("");
        panelEncabezado.add(labelReglaFalsa, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelSecante = new JLabel();
        labelSecante.setText("");
        panelEncabezado.add(labelSecante, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panelEncabezado.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(50, -1), null, 0, false));
        sideNavLabel = new JLabel();
        sideNavLabel.setText("");
        panelEncabezado.add(sideNavLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panelEncabezado.add(spacer3, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(25, -1), null, 0, false));
        final Spacer spacer4 = new Spacer();
        panelEncabezado.add(spacer4, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(25, -1), null, 0, false));
        panelInferior = new JPanel();
        panelInferior.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelPrincipal.add(panelInferior, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelTabla = new JPanel();
        panelTabla.setLayout(new CardLayout(0, 0));
        panelInferior.add(panelTabla, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelBiseccion = new JPanel();
        panelBiseccion.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelTabla.add(panelBiseccion, "Card1");
        scrollBiseccion = new JScrollPane();
        panelBiseccion.add(scrollBiseccion, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tableBiseccion = new JTable();
        tableBiseccion.setPreferredScrollableViewportSize(new Dimension(700, 600));
        scrollBiseccion.setViewportView(tableBiseccion);
        panelReglaFalsa = new JPanel();
        panelReglaFalsa.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelTabla.add(panelReglaFalsa, "Card2");
        scrollReglaFalsa = new JScrollPane();
        panelReglaFalsa.add(scrollReglaFalsa, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tableReglaFalsa = new JTable();
        tableReglaFalsa.setPreferredScrollableViewportSize(new Dimension(700, 600));
        scrollReglaFalsa.setViewportView(tableReglaFalsa);
        panelSecante = new JPanel();
        panelSecante.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelTabla.add(panelSecante, "Card3");
        scrollSecante = new JScrollPane();
        panelSecante.add(scrollSecante, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tableSecante = new JTable();
        tableSecante.setPreferredScrollableViewportSize(new Dimension(700, 600));
        scrollSecante.setViewportView(tableSecante);
        panelInputs = new JPanel();
        panelInputs.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelInferior.add(panelInputs, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelfx = new JLabel();
        labelfx.setText("f(x) = ");
        panelInputs.add(labelfx, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfFx = new JTextField();
        panelInputs.add(tfFx, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btnResolver = new JButton();
        btnResolver.setText("Resolver");
        panelInputs.add(btnResolver, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelSolucionInfo = new JLabel();
        labelSolucionInfo.setText("SoluciÃ³n =");
        panelInputs.add(labelSolucionInfo, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelErrorInfo = new JLabel();
        labelErrorInfo.setText("Error = ");
        panelInputs.add(labelErrorInfo, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panelPrincipal.add(separator1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelPrincipal;
    }

}
