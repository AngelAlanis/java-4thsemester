package com.ProyectoMatematicas;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.StyleContext;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Locale;

import com.misael.Mathematics.BiseccionModel;
import com.misael.Mathematics.Mathematics;
import com.misael.Mathematics.NewtonRaphsonModel;
import com.misael.Mathematics.ReglaFalsaModel;
import com.misael.Mathematics.SecanteModel;

public class Interfaz extends JFrame {
    private JPanel      panelPrincipal;
    private JPanel      panelEncabezado;
    private JPanel      panelInferior;
    private JPanel      panelTabla;
    private JPanel      panelInputs;
    private JTextField  tfFx;
    private JButton     btnResolver;
    private JLabel      labelLogo;
    private JLabel      labelfx;
    private JLabel      labelSolucionInfo;
    private JLabel      labelErrorInfo;
    private JPanel      panelBiseccion;
    private JPanel      panelReglaFalsa;
    private JPanel      panelSecante;
    private JScrollPane scrollBiseccion;
    private JTable      tableBiseccion;
    private JScrollPane scrollReglaFalsa;
    private JTable      tableReglaFalsa;
    private JScrollPane scrollSecante;
    private JTable      tableSecante;
    private JLabel      labelBiseccion;
    private JLabel      labelReglaFalsa;
    private JLabel      labelSecante;
    private JLabel      sideNavLabel;
    private JPanel      panelNewtonRaphson;
    private JScrollPane scrollNewtonRaphson;
    private JTable      tableNewtonRaphson;
    private JLabel      labelNewtonRaphson;
    private JButton     btnLimpiar;
    private JLabel      labelTeoremaBolzano;
    private JLabel      labelSalir;
    private ImageIcon   iconoBiseccionOFF;
    private ImageIcon   iconoReglaFalsaOFF;
    private ImageIcon   iconoSecanteOFF;
    private ImageIcon   iconoBiseccionON;
    private ImageIcon   iconoReglaFalsaON;
    private ImageIcon   iconoSecanteON;
    private ImageIcon   iconoNewtonON;
    private ImageIcon   iconoNewtonOFF;
    private ImageIcon   iconoLogo;
    private ImageIcon   iconoSalir;
    private int         selectedCardLayout = 0;
    private double      resultBiseccion;
    private double      resultReglaFalsa;
    private double      resultSecante;
    private double      resultNewton;
    private double      errorBiseccion;
    private double      errorReglaFalsa;
    private double      errorSecante;
    private double      errorNewton;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */

    public Interfaz() {
        super("Matemáticas");
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setResizable(false);
        this.setContentPane(panelPrincipal);
        crearIconos();
        configurarComponentes();
        initActionListeners();
        this.setSize(1280, 720);
        this.setUndecorated(true);
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    public void configurarComponentes() {
        actualizarIconos();
        labelLogo.setIcon(iconoLogo);
        labelSalir.setIcon(iconoSalir);
        labelTeoremaBolzano.setVisible(false);
        labelTeoremaBolzano.setText("<html><p style=\"width:250px\">" + "La ecuación no cumple con el teorema de Bolzano" + "</p></html>");

        tableBiseccion.setModel(new BiseccionModel());
        tableReglaFalsa.setModel(new ReglaFalsaModel());
        tableSecante.setModel(new SecanteModel());
        tableNewtonRaphson.setModel(new NewtonRaphsonModel());

        DefaultTableCellRenderer rendererBiseccion     = (DefaultTableCellRenderer) tableBiseccion.getDefaultRenderer(Double.class);
        DefaultTableCellRenderer rendererReglaFalsa    = (DefaultTableCellRenderer) tableReglaFalsa.getDefaultRenderer(Double.class);
        DefaultTableCellRenderer rendererSecante       = (DefaultTableCellRenderer) tableSecante.getDefaultRenderer(Double.class);
        DefaultTableCellRenderer rendererNewtonRaphson = (DefaultTableCellRenderer) tableNewtonRaphson.getDefaultRenderer(Double.class);

        rendererBiseccion.setHorizontalAlignment(SwingConstants.CENTER);
        rendererReglaFalsa.setHorizontalAlignment(SwingConstants.CENTER);
        rendererSecante.setHorizontalAlignment(SwingConstants.CENTER);
        rendererNewtonRaphson.setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void actualizarIconos() {
        labelBiseccion.setIcon(iconoBiseccionOFF);
        labelSecante.setIcon(iconoSecanteOFF);
        labelReglaFalsa.setIcon(iconoReglaFalsaOFF);
        labelNewtonRaphson.setIcon(iconoNewtonOFF);

        switch (selectedCardLayout) {
            case 0 -> labelBiseccion.setIcon(iconoBiseccionON);
            case 1 -> labelReglaFalsa.setIcon(iconoReglaFalsaON);
            case 2 -> labelSecante.setIcon(iconoSecanteON);
            case 3 -> labelNewtonRaphson.setIcon(iconoNewtonON);

        }
    }

    private void crearIconos() {
        try {
            sideNavLabel.setIcon(new ImageIcon(ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/sidenav.png"))));

            BufferedImage imagenSalir = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/salir.png"));
            iconoSalir = new ImageIcon(imagenSalir);

            BufferedImage imagenBiseccionOFF = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Biseccion_OFF.png"));
            iconoBiseccionOFF = new ImageIcon(imagenBiseccionOFF.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenSecanteOFF = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Secante_OFF.png"));
            iconoSecanteOFF = new ImageIcon(imagenSecanteOFF.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenReglaFalsaOFF = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/ReglaFalsa_OFF.png"));
            iconoReglaFalsaOFF = new ImageIcon(imagenReglaFalsaOFF.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenNewtonOFF = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Newton_OFF.png"));
            iconoNewtonOFF = new ImageIcon(imagenNewtonOFF.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenBiseccionON = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Biseccion_ON.png"));
            iconoBiseccionON = new ImageIcon(imagenBiseccionON.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenSecanteON = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Secante_ON.png"));
            iconoSecanteON = new ImageIcon(imagenSecanteON.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenReglaFalsaON = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/ReglaFalsa_ON.png"));
            iconoReglaFalsaON = new ImageIcon(imagenReglaFalsaON.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenNewtonON = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/Newton_ON.png"));
            iconoNewtonON = new ImageIcon(imagenNewtonON.getScaledInstance(70, 70, Image.SCALE_SMOOTH));

            BufferedImage imagenLogo = ImageIO.read(new File("ProyectoMatematicas/src/resources/icons/logoMathematics.png"));
            iconoLogo = new ImageIcon(imagenLogo.getScaledInstance(237, 60, Image.SCALE_SMOOTH));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void limpiarInterfaz() {
        tableBiseccion.setModel(new BiseccionModel());
        tableReglaFalsa.setModel(new ReglaFalsaModel());
        tableSecante.setModel(new SecanteModel());
        tableNewtonRaphson.setModel(new NewtonRaphsonModel());

        resultBiseccion  = 0;
        resultReglaFalsa = 0;
        resultSecante    = 0;
        resultNewton     = 0;

        errorBiseccion  = 0;
        errorReglaFalsa = 0;
        errorSecante    = 0;
        errorNewton     = 0;

        tfFx.setText("");
        labelErrorInfo.setText("Error = 0.0");
        labelSolucionInfo.setText("Solución = 0.0");
        labelTeoremaBolzano.setVisible(false);
    }

    public void initActionListeners() {

        labelSalir.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea salir?", "", JOptionPane.YES_NO_OPTION) == 0) {
                    System.exit(0);
                }
            }
        });

        btnResolver.addActionListener(e -> {

            String input = tfFx.getText();

            if (!input.trim().isEmpty()) {
                Mathematics biseccion  = new Mathematics();
                Mathematics reglaFalsa = new Mathematics();
                Mathematics secante    = new Mathematics();
                Mathematics newton     = new Mathematics();

                resultBiseccion  = Mathematics.metodoBiseccion(input, 0.0001);
                resultReglaFalsa = Mathematics.metodoReglaFalsa(input, 0.0001);
                resultSecante    = Mathematics.metodoSecante(input, 0.0001);
                resultNewton     = Mathematics.metodoNewtonRaphson(input, 0.0001);


                if (!Double.isNaN(resultBiseccion)) {
                    labelTeoremaBolzano.setVisible(false);
                    tableBiseccion.setModel(new BiseccionModel(biseccion.getTablaBiseccion()));
                    tableReglaFalsa.setModel(new ReglaFalsaModel(reglaFalsa.getTablaReglaFalsa()));
                    tableSecante.setModel(new SecanteModel(secante.getTablaSecante()));
                    tableNewtonRaphson.setModel(new NewtonRaphsonModel(newton.getTablaNewtonRaphson()));

                    errorBiseccion  = (double) tableBiseccion.getValueAt(tableBiseccion.getRowCount() - 1, 4);
                    errorReglaFalsa = (double) tableBiseccion.getValueAt(tableBiseccion.getRowCount() - 1, 4);
                    errorSecante    = (double) tableBiseccion.getValueAt(tableBiseccion.getRowCount() - 1, 4);
                    errorNewton     = (double) tableBiseccion.getValueAt(tableBiseccion.getRowCount() - 1, 4);
                } else {
                    limpiarInterfaz();
                    labelTeoremaBolzano.setVisible(true);
                    tfFx.setText(input);
                }

                actualizarLabelsInfo();
            }
        });

        btnLimpiar.addActionListener(e -> limpiarInterfaz());

        labelBiseccion.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                labelBiseccion.setIcon(iconoBiseccionON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (selectedCardLayout != 0) {
                    labelBiseccion.setIcon(iconoBiseccionOFF);
                }
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                cargarPanelBiseccion();
            }
        });

        labelReglaFalsa.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                labelReglaFalsa.setIcon(iconoReglaFalsaON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (selectedCardLayout != 1) {
                    labelReglaFalsa.setIcon(iconoReglaFalsaOFF);
                }
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                cargarPanelReglaFalsa();
            }

        });

        labelSecante.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                labelSecante.setIcon(iconoSecanteON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (selectedCardLayout != 2) {
                    labelSecante.setIcon(iconoSecanteOFF);
                }
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                cargarPanelSecante();
            }

        });

        labelNewtonRaphson.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                labelNewtonRaphson.setIcon(iconoNewtonON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (selectedCardLayout != 3) {
                    labelNewtonRaphson.setIcon(iconoNewtonOFF);
                }
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                cargarPanelNewton();
            }

        });

    }

    private void actualizarLabelsInfo() {
        switch (selectedCardLayout) {
            case 0 -> {
                labelSolucionInfo.setText("Solución = " + resultBiseccion);
                labelErrorInfo.setText("Error = " + errorBiseccion);
            }
            case 1 -> {
                labelSolucionInfo.setText("Solución = " + resultReglaFalsa);
                labelErrorInfo.setText("Error = " + errorReglaFalsa);
            }
            case 2 -> {
                labelSolucionInfo.setText("Solución = " + resultSecante);
                labelErrorInfo.setText("Error = " + errorSecante);
            }
            case 3 -> {
                labelSolucionInfo.setText("Solución = " + resultNewton);
                labelErrorInfo.setText("Error = " + errorNewton);
            }
        }
    }

    private void cargarPanelBiseccion() {
        selectedCardLayout = 0;

        panelTabla.removeAll();
        panelTabla.add(panelBiseccion);
        panelTabla.repaint();
        panelTabla.revalidate();

        actualizarIconos();
        actualizarLabelsInfo();
    }

    private void cargarPanelReglaFalsa() {
        selectedCardLayout = 1;

        panelTabla.removeAll();
        panelTabla.add(panelReglaFalsa);
        panelTabla.repaint();
        panelTabla.revalidate();

        actualizarIconos();
        actualizarLabelsInfo();
    }

    private void cargarPanelSecante() {
        selectedCardLayout = 2;

        panelTabla.removeAll();
        panelTabla.add(panelSecante);
        panelTabla.repaint();
        panelTabla.revalidate();

        actualizarIconos();
        actualizarLabelsInfo();
    }

    private void cargarPanelNewton() {
        selectedCardLayout = 3;

        panelTabla.removeAll();
        panelTabla.add(panelNewtonRaphson);
        panelTabla.repaint();
        panelTabla.revalidate();

        actualizarIconos();
        actualizarLabelsInfo();
    }


}
